//! # D-Bus interface proxy for: `org.freedesktop.Secret.Service`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.Secrets.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "org.freedesktop.Secret.Service", assume_defaults = true)]
pub trait Service {
    /// CreateCollection method
    fn create_collection(
        &self,
        properties: std::collections::HashMap<
            &str,
            &zbus::zvariant::Value<'_>,
        >,
        alias: &str,
    ) -> zbus::Result<(
        zbus::zvariant::OwnedObjectPath,
        zbus::zvariant::OwnedObjectPath,
    )>;

    /// GetSecrets method
    fn get_secrets(
        &self,
        items: &[&zbus::zvariant::ObjectPath<'_>],
        session: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<
        std::collections::HashMap<
            zbus::zvariant::OwnedObjectPath,
            (zbus::zvariant::OwnedObjectPath, Vec<u8>, Vec<u8>, String),
        >,
    >;

    /// Lock method
    fn lock(
        &self,
        objects: &[&zbus::zvariant::ObjectPath<'_>],
    ) -> zbus::Result<(
        Vec<zbus::zvariant::OwnedObjectPath>,
        zbus::zvariant::OwnedObjectPath,
    )>;

    /// OpenSession method
    fn open_session(
        &self,
        algorithm: &str,
        input: &zbus::zvariant::Value<'_>,
    ) -> zbus::Result<(
        zbus::zvariant::OwnedValue,
        zbus::zvariant::OwnedObjectPath,
    )>;

    /// ReadAlias method
    fn read_alias(
        &self,
        name: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// SearchItems method
    fn search_items(
        &self,
        attributes: std::collections::HashMap<&str, &str>,
    ) -> zbus::Result<(
        Vec<zbus::zvariant::OwnedObjectPath>,
        Vec<zbus::zvariant::OwnedObjectPath>,
    )>;

    /// SetAlias method
    fn set_alias(
        &self,
        name: &str,
        collection: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// Unlock method
    fn unlock(
        &self,
        objects: &[&zbus::zvariant::ObjectPath<'_>],
    ) -> zbus::Result<(
        Vec<zbus::zvariant::OwnedObjectPath>,
        zbus::zvariant::OwnedObjectPath,
    )>;

    /// CollectionChanged signal
    #[zbus(signal)]
    fn collection_changed(
        &self,
        collection: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// CollectionCreated signal
    #[zbus(signal)]
    fn collection_created(
        &self,
        collection: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// CollectionDeleted signal
    #[zbus(signal)]
    fn collection_deleted(
        &self,
        collection: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// Collections property
    #[zbus(property)]
    fn collections(
        &self,
    ) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;
}
